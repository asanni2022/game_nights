# Generated by Django 4.1 on 2022-08-27 15:02

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=64, unique=True, verbose_name='email address')),
                ('username', models.CharField(max_length=16, unique=True, verbose_name='Username')),
                ('first_name', models.CharField(max_length=16, verbose_name='First name')),
                ('last_name', models.CharField(max_length=16, verbose_name='Last name')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Name')),
                ('code', models.CharField(blank=True, default=None, max_length=8, null=True, verbose_name='Code')),
                ('category', models.CharField(max_length=16, verbose_name='Category')),
                ('max_attendees', models.IntegerField(blank=True, default=None, null=True, verbose_name='Maximum attendees')),
                ('private', models.BooleanField(blank=True, default=False, null=True, verbose_name='Private game')),
                ('start_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='start date and time')),
                ('end_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='end date and time')),
                ('all_day', models.BooleanField(blank=True, default=False, null=True, verbose_name='All day')),
                ('description', models.TextField(blank=True, default=None, null=True, verbose_name='desciption')),
                ('chat_creation', models.BooleanField(blank=True, default=False, null=True, verbose_name='Chat Creation')),
                ('games', models.JSONField(blank=True, default=None, null=True)),
                ('address_1', models.CharField(max_length=128, verbose_name='Address')),
                ('address_2', models.CharField(blank=True, default=None, max_length=128, null=True, verbose_name="Address cont'd")),
                ('city', models.CharField(max_length=64, verbose_name='City')),
                ('state', models.CharField(max_length=2, verbose_name='State')),
                ('zip_code', models.CharField(max_length=5, verbose_name='Zip code')),
                ('owner', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=None, max_length=32, unique=True, verbose_name='Name')),
                ('code', models.CharField(default=None, max_length=8, unique=True, verbose_name='Code')),
                ('member', models.ManyToManyField(blank=True, related_name='members', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GroupRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='Requestgroups', to='game_night_app.group')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Groupreceiver', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Groupsender', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GroupList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ManyToManyField(blank=True, related_name='Listgroups', to='game_night_app.group')),
                ('owner', models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendees', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='game_night_app.event')),
            ],
        ),
        migrations.CreateModel(
            name='EventGame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game', models.CharField(max_length=32, unique=True, verbose_name='Game')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eventgames', to='game_night_app.event')),
            ],
        ),
        migrations.CreateModel(
            name='EventRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event', to='game_night_app.event')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Eventreceiver', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Eventsender', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('sender', 'receiver')},
            },
        ),
    ]
